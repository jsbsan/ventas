' Gambas class file

Public Function Total() As Integer 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "SELECT producto_codigo FROM SumaSalida" 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Intentar obtener lista")
    Return -1 
  Endif 
  Return Val(Str$(mRs.Count)) 
  
End 

Public Function BuscarIgualProducto_codigo(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From SumaSalida"
  If CampoOrden = Null Then 
    SQlString &= " WHERE producto_codigo like &1 "
  Else 
    SQlString &= " WHERE producto_codigo like &1 Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString, valor) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif
  
End

Public Function BuscarIgualProducto_nombre(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From SumaSalida"
  If CampoOrden = Null Then 
    SQlString &= " WHERE producto_nombre like &1 "
  Else 
    SQlString &= " WHERE producto_nombre like &1 Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString, valor) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif
  
End

Public Function BuscarIgualLinearecibo_idproducto(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From SumaSalida"
  If CampoOrden = Null Then 
    SQlString &= " WHERE linearecibo_idproducto like &1 "
  Else 
    SQlString &= " WHERE linearecibo_idproducto like &1 Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString, valor) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif
  
End

Public Function BuscarIgualSuma_VENTA(valor As String, Optional CampoOrden As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From SumaSalida"
  If CampoOrden = Null Then 
    SQlString &= " WHERE suma_VENTA like &1 "
  Else 
    SQlString &= " WHERE suma_VENTA like &1 Order by " & CampoOrden
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString, valor) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif
  
End

Public Function sql(consulta As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  Try mRs = conectar.hconn.Exec(consulta) 
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs
  
End

Public Function gridFormatearColumnas(grid As GridView) As Gridview
  
  Dim f As New Font
  
  f.name = "Sans"
  f.size = Me.sizefont
  Me.formatearFechaIdioma()
  Me.arrayAnchoColumnas = New Integer[]
  With grid 
    .header = 3 
    .rows.count = 0 
    .columns.count = 4 
    .Columns[0].title = ("producto_codigo")
    .Columns[0].width = -1 'f.textwidth(("producto_codigo")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[1].title = ("producto_nombre")
    .Columns[1].width = -1 'f.textwidth(("producto_nombre")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[2].title = ("linearecibo_idproducto")
    .Columns[2].width = -1 'f.textwidth(("linearecibo_idproducto")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[3].title = ("suma_VENTA")
    .Columns[3].width = -1 'f.textwidth(("suma_VENTA")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .font.name = "Sans"
    .font.size = 10 
    .Background = 16777215 
    .Foreground = 0 
  End With
  grid.Mode = Select.Single
  Return grid 
  
End

Public Function gridFormatearFilas(grid As GridView) As Gridview
  
  Dim titulolargo As String
  Dim f As New Font
  
  f.name = "Sans"
  f.size = Me.sizefont
  With grid
    .header = 3 
    .rows.count = 4
    .columns.count = 2
    .Columns[0].title = "Campos"
    .Columns[1].title = "Registro"
    .font.name = "Sans"
    .font.size = 10 
    .Background = 16777215
    .Foreground = 0 
  End With
  grid[0, 0].text = ("producto_codigo")
  grid[0, 0].background = color.lightgray
  If Len(titulolargo) < Len(("producto_codigo")) Then 
    titulolargo = ("producto_codigo")
  Endif
  grid[1, 0].text = ("producto_nombre")
  grid[1, 0].background = color.lightgray
  If Len(titulolargo) < Len(("producto_nombre")) Then 
    titulolargo = ("producto_nombre")
  Endif
  grid[2, 0].text = ("linearecibo_idproducto")
  grid[2, 0].background = color.lightgray
  If Len(titulolargo) < Len(("linearecibo_idproducto")) Then 
    titulolargo = ("linearecibo_idproducto")
  Endif
  grid[3, 0].text = ("suma_VENTA")
  grid[3, 0].background = color.lightgray
  If Len(titulolargo) < Len(("suma_VENTA")) Then 
    titulolargo = ("suma_VENTA")
  Endif
  grid.Columns[0].width = F.textwidth(titulolargo & "m") 
  Return grid
  
End

Public Sub contenido() As Result 
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "SELECT * FROM SumaSalida" 
  Try mRs = conectar.hconn.Exec(SQLString) 
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs 
  
End 

Public Function mostrarRegistro(numero As Integer, grid As GridView, Optional sqlcadena As String) As Result
  
  Dim resultado As Result
  
  If sqlcadena = Null Then 
    resultado = contenido()
  Else 
    resultado = sql(sqlcadena)
  Endif 
  resultado.MoveTo(numero)
  Try grid[0, 1].text = Str$(resultado!producto_codigo)
  Try grid[1, 1].text = Str$(resultado!producto_nombre)
  Try grid[2, 1].text = Str$(resultado!linearecibo_idproducto)
  Try grid[3, 1].text = Str$(resultado!suma_VENTA)
  
End

Public Function mostrarRegistroVO(objetoVO As SumaSalidaVO, grid As GridView) As Result
  
  Try grid[0, 1].text = Str$(objetoVO.producto_codigo)
  Try grid[1, 1].text = Str$(objetoVO.producto_nombre)
  Try grid[2, 1].text = Str$(objetoVO.linearecibo_idproducto)
  Try grid[3, 1].text = Str$(objetoVO.suma_VENTA)
  
End

Public Function GridResultanteSQL(res As Result, grid As GridView) As Gridview  
  
  Dim columna As Integer
  Dim hField As ResultField
  Dim a As Integer
  Dim fila As Integer
  'defino la regilla
  With grid 
    .header = 3 
    .rows.count = 0 
    Try .columns.count = res.Fields.Count 
    columna = -1
    For Each hField In res.Fields
      columna = columna + 1
      Try .Columns[columna].title = Str$(hField.name)
    Next 
    .font.name = "Sans"
    .font.size = 10
    .Background = 16777215 
    .Foreground = 0 
  End With
  Return grid 
  
End

Public hresultadoNuevo As Result
Public gridviewPropio As GridView 'para tener acceso desde clases heredadas
Public actualiza As Observer

Public iconoTrue As String = "icon:/16/apply"
Public iconoFalse As String = "icon:/16/cancel"
Public sizefont As Integer = 10

Public formatoFecha As String

Public Sub MostrarGridView(gridviewtrabajo As GridView, Optional cadenaSQL As String, Optional resultado As Result)
  
  gridFormatearColumnas(gridviewtrabajo)
  gridviewPropio = gridviewtrabajo
  
  If Not IsNull(resultado) Then 
    hresultadoNuevo = resultado
  Else
    'no ha habido resultado
    If cadenaSQL = "" Then 
      hresultadoNuevo = contenido()
    Else
      hresultadoNuevo = sql(cadenaSQL)
    Endif
  Endif
  
  actualiza = New Observer(gridviewPropio) As "Observar"
  gridviewPropio.tag = Split(NombreCampos()["sintraducidos"], "|")
  gridviewPropio.clear()
  gridviewPropio.rows.count = hresultadoNuevo.count
  AsignaAnchoGrid()
  
End

Property ColorFilaPar As Integer 
Private hColorFilaPar As Integer = color.white

Private Function ColorFilaPar_read() As Integer 
  
  Return hColorFilaPar 
  
End  

Private Sub ColorFilaPar_write(Valor As Integer)
  
  hColorFilaPar = Valor 
  
End

Property ColorFilaImPar As Integer 
Private hColorFilaImPar As Integer = color.cyan

Private Function ColorFilaImPar_read() As Integer 
  
  Return hColorFilaImPar 
  
End  

Private Sub ColorFilaImPar_write(Valor As Integer)
  
  hColorFilaImPar = Valor 
  
End

Public Sub Observar_Data(row As Integer, column As Integer)
  
  Dim f As New Font
  Dim datocontenido As Variant
  
  f.name = "Sans"
  f.size = Me.sizefont
  
  '-------------------------------------------
  'colores....filas impar / par ge regillas
  '-------------------------------------------
  If row Mod 2 = 0 Then
    Me.gridviewPropio.Data.Background = Me.ColorFilaImPar
  Else
    Me.gridviewPropio.Data.Background = Me.ColorFilaPar
  Endif
  
  Me.hresultadoNuevo.MoveTo(row)
  'comprobar si hay datos en TAG
  If IsNull(Me.gridviewPropio.tag) Then 
    Try datocontenido = Me.hresultadoNuevo[Replace(Me.gridviewPropio.columns[column].text, "_", ".")]
    If Error Then 
      Print "warning !!: nombre de campo que no encuentro " & Me.GridViewPropio.tag[column] & " en la tabla/vista"
    Endif
    
    If IsDate(Str$(datocontenido)) Then
      Try Me.gridviewPropio.Data.text = Format(Date(datocontenido), Me.formatofecha)
      If Error Then Me.gridviewPropio.Data.text = Format(Date(Val(datocontenido)), Me.formatofecha)
    Else
      If IsBoolean(Str$(datocontenido)) Then 
        If datocontenido Then 
          Me.gridviewPropio.data.picture = picture[Me.iconoTrue]
        Else
          Me.gridviewPropio.data.picture = picture[Me.iconoFalse]
        Endif
      Else
        'añadido para escribir las columnas que contengan números y que no sea tipo Id el campo
        If IsNumber(Str$(datocontenido)) And Me.NoesTipoId(Me.gridviewPropio.columns[column].text) Then
          Try Me.gridviewPropio.Data.text = Format$(datocontenido, ",#.#0")
          If Error Then Me.gridviewPropio.Data.text = Format$(Val(datocontenido), ",#.#0")
          Me.gridviewPropio.Data.Alignment = Align.Right
        Else
          Me.gridviewPropio.Data.text = datocontenido
        Endif
      Endif
    Endif
    ''hay datos en  TAG  
  Else
    Try datocontenido = Me.hresultadoNuevo[Replace(Me.GridViewPropio.tag[column], "_", ".")]
    If Error Then 
      Print "warning !!: nombre de campo que no encuentro " & Me.GridViewPropio.tag[column] & " en la tabla/vista"
    Endif
    
    If IsDate(Str$(datocontenido)) Then
      Try Me.gridviewPropio.Data.text = Format(Date(datocontenido), Me.formatofecha)
      If Error Then Me.gridviewPropio.Data.text = Format(Date(Val(datocontenido)), Me.formatofecha)
    Else
      If IsBoolean(Str$(datocontenido)) Then 
        If datocontenido Then 
          Me.gridviewPropio.data.picture = picture[Me.iconoTrue]
        Else
          Me.gridviewPropio.data.picture = picture[Me.iconoFalse]
        Endif
      Else
        
        'añadido para escribir las columnas que contengan números  y que no sea tipo Id el campo
        If IsNumber(Str$(datocontenido)) And Me.NoesTipoId(Me.GridViewPropio.tag[column]) Then
          Try Me.gridviewPropio.Data.text = Format$(datocontenido, ",#.#0")
          If Error Then Me.gridviewPropio.Data.text = Format$(Val(datocontenido), ",#.#0")
          Me.gridviewPropio.Data.Alignment = Align.Right
        Else
          Me.gridviewPropio.Data.text = datocontenido
        Endif
        
      Endif
    Endif
  Endif
  
  '-----------------------------------------------
  ' columna con id, con ancho 0, para que no se vea
  '-----------------------------------------------
  ' If Upper$(Me.gridviewPropio.Columns[column].title) = Upper$("id") Then
  '   me.arrayAnchoColumnas[column] = 0
  '   return 'salgo de la funcion
  ' Endif
  
  'Compruebo ancho y amplio si es necesario.
  ' If me.arrayAnchoColumnas[column]< F.textwidth(me.gridviewPropio.Data.text) Then 
  ' me.arrayAnchoColumnas[column] = F.textwidth(me.gridviewPropio.Data.text & "m") 
  ' Endif
  
End

Public Function NoesTipoId(nombre As String) As Boolean
  
  If Upper$(Mid$(nombre, 1, 2)) = "ID" Then 
    Return False
  Else
    Return True
  Endif 
  
End

'Array que contiene los valores del ancho de las columnas.
Public arrayAnchoColumnas As New Integer[]
Public ocultaId As String ''sirve para ocultar una columna por su nombre: "id" o "", oculta si su nombre es "id"; "id*": oculta columna si su nmbre empieza por idxxxx
'AsignaAnchoGrid

Public Sub AsignaAnchoGrid()
  
  Dim a As Integer
  
  For a = 0 To Me.arrayAnchoColumnas.max
    Select Case Upper$(Me.ocultaId)
      Case Upper$("id"), "" 'para mantener retrocompatibilidad, se admite valor vacio.
        If Upper$(Me.gridviewPropio.tag[a]) = "ID" Then
          'oculto columna cuyo nombre es "ID"
          Me.gridviewPropio.Columns[a].width = 0
        Else
          Me.gridviewPropio.Columns[a].width = Me.arrayAnchoColumnas[a]
        Endif
        
      Case Upper$("id*")
        'se oculta si contiene ID al principio
        If Mid$(Upper$(Me.gridviewPropio.tag[a]), 1, 2) = "ID" Then
          'oculto columna cuyo nombre empieza por id, por ejemplo idcategoria
          Me.gridviewPropio.Columns[a].width = 0
        Else
          Me.gridviewPropio.Columns[a].width = Me.arrayAnchoColumnas[a]
        Endif
      Default
        Me.gridviewPropio.Columns[a].width = Me.arrayAnchoColumnas[a]
        
    End Select
    
  Next
  
  'nota:
  'esta regla no se aplica si es la última columna, ya que simpre se mostrara si existe ancho del gridview.
  
End

Public Sub formatearFechaIdioma()
  
  If System.Language = "en_US.UTF-8" Then
    Me.formatofecha = "mm/dd/yyyy" 'usa
  Else
    Me.formatofecha = "dd/mm/yyyy" 'esp
  Endif
  
End

'-----------------------------------------------------
'añadido ordenar por columnas haciendo click...
'-----------------------------------------------------
Public ordenlistado As Integer

'PUBLIC SUB Observar_ColumnClick(Column AS Integer)
'IF me.ordenlistado = 0 THEN
'me.ord_AZ(Me.gridviewPropio, Column)
'me.ordenlistado = 1
'ELSE
'me.ordenlistado = 0
'ord_ZA(Me.gridviewPropio, Column)
'ENDIF
'END

Public Sub ord_AZ(grid As GridView, a As Integer)
  'a: indica la columna a la que ordenamos
  'grid: es la rejilla que ordenamos
  
  Dim limite As Integer
  Dim cambio1 As String
  Dim i As Integer
  Dim j As Integer
  Dim col As Integer
  
  limite = grid.Rows.COUNT
  If (grid.Columns.COUNT < a + 1) Or a < 0 Then
    Message.Error("Error en la columna introducida para ordenar")
    grid.visible = True
    Return
    
  Endif
  For i = 0 To limite - 1
    For j = 0 To limite - 2
      If UCase$(Grid[j, a].Text) > UCase$(Grid[j + 1, a].Text) Then
        
        For col = 0 To grid.Columns.COUNT - 1
          cambio1 = Grid[j, col].Text
          Grid[j, col].text = Grid[j + 1, col].Text
          Grid[j + 1, col].text = cambio1
          
        Next
        
      Endif
    Next
  Next
  
End

'------------------------------------------------------------------------
Public Sub ord_ZA(grid As GridView, a As Integer)
  'a: indica la columna a la que ordenamos
  'grid: es la rejilla que ordenamos
  
  Dim limite As Integer
  Dim cambio1 As String
  Dim i As Integer
  Dim j As Integer
  Dim col As Integer
  
  limite = grid.Rows.COUNT
  If (grid.Columns.COUNT < a + 1) Or a < 0 Then
    Message.Error("Error en la columna introducida para ordenar")
    grid.visible = True
    Return
    
  Endif
  For i = 0 To limite - 2
    
    For j = i To limite - 1
      If UCase$(Grid[i, a].Text) <= UCase$(Grid[j, a].Text) Then
        For col = 0 To grid.Columns.COUNT - 1
          cambio1 = Grid[j, col].Text
          Grid[j, col].text = Grid[i, col].Text
          Grid[i, col].text = cambio1
        Next
      Endif
    Next
  Next
  
End

Public Function ConvertirResult(hr As Result) As SumaSalidaVO[]
  
  Dim datos As New SumaSalidaVO[]
  Dim datotmp As SumaSalidaVO
  
  While hr.available
    datotmp = New SumaSalidaVO
    Try datotmp.producto_codigo = hr["producto_codigo"]
    Try datotmp.producto_nombre = hr["producto_nombre"]
    Try datotmp.linearecibo_idproducto = hr["linearecibo_idproducto"]
    Try datotmp.suma_VENTA = hr["suma_VENTA"]
    Try datos.add(datotmp)
    hr.movenext
  Wend
  Return datos
  
End

Public Function filaSeleccionadaVO() As SumaSalidaVO
  
  Dim colecciontmp As New Collection
  Dim fila As Integer
  Dim idbuscado As Integer
  Dim objTempVO As New SumaSalidaVO
  
  Try fila = gridviewPropio.row
  If Error Or If FILA = -1 Then 
    message.info(("No hay registro seleccionado")) 'no hay fila seleccionada
    Return Null
  Endif
  idbuscado = Val(Replace$(gridviewPropio[fila, 0].text, ".", ","))
  objTempVO = Me.ConvertirResult(Me.BuscarIgual(idbuscado, "producto_codigo"))[0]
  Return objTempVO
  
End

Public Function extraeColumnaArray(datos As SumaSalidaVO[], nombrecampo As String) As String
  
  Dim datotmp As Object
  Dim lista As New String[]
  
  For Each datotmp In datos
    lista.Add(Object.GetProperty(datotmp, nombrecampo))
  Next
  Return lista.Join(",")
  
End

Public Function BuscarIgual(valor As Integer, campoId As String, Optional CampoOrden As String, Optional restosql As String) As Result
  
  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result
  
  conectar.Conexion()
  SQLString = "Select * From SumaSalida"
  If CampoOrden = Null Then 
    SQlString &= " WHERE " & campoId & " like &1 " & restosql
  Else 
    SQlString &= " WHERE " & campoId & " like &1 " & restosql & " Order by " & CampoOrden 
  Endif 
  Try mRs = conectar.hconn.Exec(SQLString, valor) 
  If Error Then 
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else 
    Return mRs
  Endif 
  
End

Public Function NombreCampos() As Collection
  
  Dim codigocampos As New Collection
  Dim textocamposTraducidos As String
  Dim textocampos As String
  
  textocamposTraducidos = ("producto_codigo") & "|" & ("producto_nombre") & "|" & ("linearecibo_idproducto") & "|" & ("suma_VENTA")
  textocampos = "producto_codigo" & "|" & "producto_nombre" & "|" & "linearecibo_idproducto" & "|" & "suma_VENTA"
  codigocampos.add(textocamposTraducidos, "traducidos")
  codigocampos.add(textocampos, "sintraducidos")
  Return codigocampos
  
End

Public Sub ImprimirRapidoTablaHorizontal()
  
  Dim contenidofichero As String
  Dim codigo As String
  Dim a As Integer
  Dim fila As Integer, columna As Integer
  
  Application.busy = 1
  
  codigo = "<table border=\"1\" style=\"width:100%\">\n"
  'imprimo titulos
  codigo &= "<tr>\n" ""
  For a = 0 To gridviewPropio.columns.Max
    codigo &= "<td><b>" & gridviewPropio.Columns[a].title & "</b></td>"
  Next
  codigo &= "</tr>\n" ""
  
  For fila = 0 To gridviewPropio.Rows.Max
    
    codigo &= "<tr>\n" ""
    For columna = 0 To gridviewPropio.columns.Max
      codigo &= "<td>" & gridviewPropio[fila, columna].text & "</td>"
    Next
    codigo &= "</tr>\n" ""
    
  Next
  
  codigo &= "</table>\n"
  
  contenidofichero = File.Load("estructura.html")
  contenidofichero = Replace$(contenidofichero, "TITULO", ("INFORME"))
  contenidofichero = Replace$(contenidofichero, "CONTENIDO", codigo)
  file.Save("/tmp/informe.html", contenidofichero)
  Desktop.Open("/tmp/informe.html")
  Application.Busy = 0
  
End

Public Sub ImprimirRapidoTablaVertical()
  
  Dim contenidofichero As String
  Dim codigo As String
  Dim a As Integer, fila As Integer, columna As Integer
  
  Application.busy = 1
  
  Try fila = gridviewPropio.Row
  If fila = -1 Or If Error Then 
    Application.Busy = 0
    Message.Info(("Seleccione un registro"))
    Return
  Endif
  
  codigo &= "<table border=\"1\" >\n"
  For columna = 0 To gridviewPropio.columns.Max
    codigo &= "<tr>\n" ""
    
    codigo &= "<td><b>" & gridviewPropio.Columns[columna].title & "</b></td>"
    
    codigo &= "<td style=\"width:100%\">" & gridviewPropio[fila, columna].text & "</td>"
    codigo &= "</tr>\n" ""
    
  Next
  codigo &= "</table>\n"  
  CODIGO &= "<BR><BR>"
  
  contenidofichero = File.Load("estructura.html")
  contenidofichero = Replace$(contenidofichero, "TITULO", ("INFORME"))
  contenidofichero = Replace$(contenidofichero, "CONTENIDO", codigo)
  file.Save("/tmp/informe.html", contenidofichero)
  Desktop.Open("/tmp/informe.html")
  Application.Busy = 0
  
End
